{"version":3,"sources":["webpack:///src/environments/environment.ts","webpack:///src/app/app.module.ts","webpack:///src/app/chat-form/chat-form.component.ts","webpack:///src/app/chat-form/chat-form.component.html","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["environment","production","AppModule","injector","customElement","customElements","define","declarations","imports","providers","entryComponents","ChatFormComponent","id","title","buttonTitle","formOpen","formData","name","email","formSubmitted","form","valid","selector","templateUrl","styleUrls","bootstrapModule","err","console","error","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports"],"mappings":"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","file":"main-es5.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { BrowserModule } from '@angular/platform-browser';\nimport { DoBootstrap, Injector, NgModule } from '@angular/core';\n\nimport { ChatFormComponent } from './chat-form/chat-form.component';\nimport { FormsModule } from '@angular/forms';\nimport { createCustomElement } from '@angular/elements';\n\n@NgModule({\n  declarations: [\n    ChatFormComponent,\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  providers: [],\n  entryComponents: [ChatFormComponent]\n})\nexport class AppModule implements DoBootstrap {\n  constructor(private injector: Injector) {\n    const customElement = createCustomElement(ChatFormComponent, { injector });\n    customElements.define('app-chat-form', customElement);\n  }\n\n  ngDoBootstrap() {\n\n  }\n} \n","import { Component, Input, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'app-chat-form',\n  templateUrl: './chat-form.component.html',\n  styleUrls: ['./chat-form.component.css']\n})\nexport class ChatFormComponent implements OnInit {\n\n  @Input() id: number = -1;\n  @Input() title: string = \"Sign Up! for News Letter\";\n  @Input() buttonTitle: string = \"Subscribe for News Letter\";\n  formOpen = false;\n  formData = { name: '', email: '' };\n  formSubmitted = false;\n\n  constructor() { }\n\n  ngOnInit() {\n\n  }\n  openForm() {\n    this.formData = { name: '', email: '' };\n    this.formSubmitted = false;\n    this.formOpen = true;\n  }\n  onSubmit(form: NgForm) {\n    this.formSubmitted = true;\n    if (!form.valid)\n      return;\n  }\n  closeForm() {\n    this.formOpen = false;\n  }\n\n}\n","<div *ngIf=\"!formOpen; else formEntry\">\n    <button class=\"btn btn-primary open-button\" (click)=\"openForm()\">{{buttonTitle}}</button>\n</div>\n<ng-template #formEntry>\n    <div class=\"card form-popup\">\n        <form (ngSubmit)=\"onSubmit(emailForm)\" #emailForm=\"ngForm\" class=\"form-container\">\n            <div class=\"card-header bg-info text-white\">\n                <h5> {{title}}\n                    <button type=\"button\" class=\"close text-white\" aria-label=\"Close\" (click)=\"closeForm()\">\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                </h5>\n            </div>\n            <div class=\"card-body\">\n                <div class=\"form-group\">\n                    <label for=\"name\"><b>Id</b></label>\n                    <input type=\"text\" name=\"id\" [value]=\"id\" class=\"form-control\" readonly>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"name\"><b>Name</b></label>\n                    <input type=\"text\" placeholder=\"Enter name\" #Name=\"ngModel\" name=\"name\" [(ngModel)]=\"formData.name\"\n                        required class=\"form-control\">\n                    <span *ngIf=\"formSubmitted && Name.invalid\" class=\"form-text\" style=\"color: red;\">\n                        Name is required\n                    </span>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"email\"><b>Email</b></label>\n                    <input type=\"text\" placeholder=\"Enter email\" #Email=\"ngModel\" name=\"email\"\n                        [(ngModel)]=\"formData.email\" required class=\"form-control\">\n                    <span *ngIf=\"formSubmitted && Email.invalid\" class=\"form-text\" style=\"color: red;\">\n                        Email is required\n                    </span>\n                </div>\n            </div>\n            <div class=\"card-footer\">\n                <button type=\"submit\" class=\"btn btn-info\">Sign up</button> &nbsp;\n            </div>\n        </form>\n    </div>\n</ng-template>","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}